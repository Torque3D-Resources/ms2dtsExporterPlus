#ifndef _MILKSHAPEBONE_H_
#define _MILKSHAPEBONE_H_


#include "MilkshapeNode.h"


//--------------------------------------------------------------------------
/// Wrapper class for a milkshape joint (bone)
class MilkshapeBone : public MilkshapeNode
{
   S32 mBoneIndex;         //!< Index of the milkshape bone object

   //--------------------------------------------------------------------------
   // Interpolation methods used to compute tween frames - phdana

   /// Interpolate between two positions
   ///
   /// @param out     Pointer to store resultant position
   /// @param a       First position
   /// @param b       Second position
   /// @param alpha   Amount to interpolate
   void lerpTranslation(DTS::Point3D *out, const DTS::Point3D &a,
                        const DTS::Point3D &b, float alpha) const;

   /// Interpolate between two positions
   ///
   /// @param out        Pointer to store resultant position
   /// @param a          First position
   /// @param b          Second position
   /// @param outFrame   Desired output frame index
   /// @param aFrame     Frame index of the first position
   /// @param bFrame     Frame index of the second position
   void lerpTranslation(DTS::Point3D *out, const DTS::Point3D &a,
                        const DTS::Point3D &b, int outFrame, int aFrame, int bFrame) const;

   /// Interpolate between two rotations
   ///
   /// @param out     Pointer to store resultant rotation
   /// @param q1      First rotation
   /// @param q2      Second rotation
   /// @param alpha   Amount to interpolate
   void lerpRotation(DTS::Quaternion *out, const DTS::Quaternion &q1,
                     const DTS::Quaternion &q2, float alpha) const;

   /// Interpolate between two rotations
   ///
   /// @param out        Pointer to store resultant rotations
   /// @param a          First rotations
   /// @param b          Second rotations
   /// @param outFrame   Desired output frame index
   /// @param aFrame     Frame index of the first rotations
   /// @param bFrame     Frame index of the second rotations
   void lerpRotation(DTS::Quaternion *out, const DTS::Quaternion &a,
                     const DTS::Quaternion &b, int outFrame, int aFrame, int bFrame) const;

   //--------------------------------------------------------------------------

   /// Get a milkshape bone position at a certain frame
   ///
   /// @param bone    Pointer to the milkshape bone
   /// @param frame   Frame index at which to get the position
   ///
   /// @return The position keyframe
   DTS::Point3D getPositionKey(msBone *bone, int frame) const;

   /// Get a milkshape bone rotation at a certain frame
   ///
   /// @param bone    Pointer to the milkshape bone
   /// @param frame   Frame index at which to get the rotation
   ///
   /// @return The rotation keyframe
   DTS::Quaternion getRotationKey(msBone *bone, int frame) const;

   /// Get the absolute translation and rotation for the given bone at the
   /// specified frame. Milkshape stores bone positions/rotations relative to
   /// the parent bone, so we need to start back at the parent bone, then
   /// recursively apply transforms to get the absolute transform. Keyframe
   /// positions/rotations are stored relative to the bones base transform.
   ///
   /// @param bone    The milkshape bone
   /// @param frame   Frame to get transform at
   /// @param pos     Point to store final translation
   /// @param rot     Quaternion to store final rotation
   void getBonePosRot(msBone *bone, int frame, DTS::Point3D& pos, DTS::Quaternion& rot) const;

public:

   MilkshapeBone(S32 boneIndex);

   bool isEqual(const MilkshapeNode *node) const;
   bool isBone() const { return true; }

   /// Get the bone transform at a certain frame. If the frame is not a
   /// milkshape keyframe, the transform will be generated by interpolating
   /// between the keyframes either side of the specified frame. If the frame
   /// is outside the range of keyframes, it will be clipped to the start/end
   /// keyframe.
   ///
   /// @param frame   Index of the animation frame at which to retrieve the bone transform
   ///
   /// @return The nodes transform at the given frame
   DTS::Matrix<4,4,F32> getNodeTransform(S32 frame) const;
};

#endif // _MILKSHAPEBONE_H_
